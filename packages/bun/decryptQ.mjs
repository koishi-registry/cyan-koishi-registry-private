function decryptQ() {
  try {
    // 复制原始混淆的Q数组定义
    var Q = [[].at[([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([][[]] + [])[1] + "false"[!0 + !0 + !0] + "tr" + ([][[]] + [])[0] + ([].at + [])[!0 + !0 + !0] + "t" + (!0 + [].at)[10] + "r"]("r" + "true"[!0 + !0 + !0] + "t" + ([][[]] + [])[0] + "r" + ([][[]] + [])[1] + ""["f" + (!0 + [].at)[10] + ([][[]] + [])[1] + "t" + ([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + "false"[!0 + !0] + (!0 + [].at)[10] + "r"]()[1 + [!0 + !0]] + ("t1" + [!0 + !0 + !0 + !0] + [!0 + !0 + !0 + !0 + !0 + !0 + !0] + "true"[!0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0 + !0 + !0] + [!0 + !0 + !0 + !0] + "t1" + [!0 + !0] + "0rt1" + [!0 + !0 + !0 + !0 + !0] + [!0 + !0 + !0 + !0 + !0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0 + !0 + !0] + [!0 + !0 + !0 + !0] + "true"[!0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0] + [!0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0 + !0 + !0] + [!0 + !0 + !0 + !0] + "true"[!0 + !0 + !0] + ([][[]] + [])[!0 + !0] + "t11" + [!0 + !0 + !0 + !0 + !0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0] + [!0 + !0] + "t1" + [!0 + !0 + !0 + !0 + !0] + [!0 + !0] + "true"[!0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0] + [!0 + !0 + !0] + "t1" + [!0 + !0 + !0 + !0 + !0 + !0] + [!0 + !0 + !0 + !0] + "false"[!0 + !0 + !0])["false"[!0 + !0 + !0] + (+(!0 + !0 + "11"))["t" + (!0 + [].at)[10] + ""[([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([][[]] + [])[1] + "false"[!0 + !0 + !0] + "tr" + ([][[]] + [])[0] + ([].at + [])[!0 + !0 + !0] + "t" + (!0 + [].at)[10] + "r"][([][[]] + [])[1] + "a" + (0[([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([][[]] + [])[1] + "false"[!0 + !0 + !0] + "tr" + ([][[]] + [])[0] + ([].at + [])[!0 + !0 + !0] + "t" + (!0 + [].at)[10] + "r"] + [])[11] + "true"[!0 + !0 + !0]]](!0 + !0 + !0 + [1])[1] + "false"[!0 + !0] + ([!1] + [][[]])[10] + "t"]("t")[([]["true"[!0 + !0 + !0] + ([][[]] + [])[1] + "tr" + ([!1] + [][[]])[10] + "true"[!0 + !0 + !0] + "false"[!0 + !0 + !0]]() + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([!1] + [][[]])[10] + ([][[]] + [])[1]](([].at[([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([][[]] + [])[1] + "false"[!0 + !0 + !0] + "tr" + ([][[]] + [])[0] + ([].at + [])[!0 + !0 + !0] + "t" + (!0 + [].at)[10] + "r"]("r" + "true"[!0 + !0 + !0] + "t" + ([][[]] + [])[0] + "r" + ([][[]] + [])[1] + "false0"[([!1] + [][[]])[10] + "ta" + "false"[!0 + !0] + ([!1] + [][[]])[10] + ([].at + [])[!0 + !0 + !0] + "false"[!0 + !0 + !0]]()[10] + !1 + "false0"[([!1] + [][[]])[10] + "ta" + "false"[!0 + !0] + ([!1] + [][[]])[10] + ([].at + [])[!0 + !0 + !0] + "false"[!0 + !0 + !0]]()[10])()[([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([][[]] + [])[1] + "false"[!0 + !0 + !0] + "tr" + ([][[]] + [])[0] + ([].at + [])[!0 + !0 + !0] + "t" + (!0 + [].at)[10] + "r"]("false0"[([!1] + [][[]])[10] + "ta" + "false"[!0 + !0] + ([!1] + [][[]])[10] + ([].at + [])[!0 + !0 + !0] + "false"[!0 + !0 + !0]]()[10]) + [])[1]) + ""["f" + (!0 + [].at)[10] + ([][[]] + [])[1] + "t" + ([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + "false"[!0 + !0] + (!0 + [].at)[10] + "r"]()[1 + [!0 + !0]])()];

    console.log("Q[0] = " + Q[0]);

    // 尝试解析这个值是如何构造的
    console.log("\n尝试解析构造过程:");

    // 分解一些基本表达式
    console.log("[].at + [] = " + ([].at + []));
    console.log("(!0 + !0 + !0) = " + (!0 + !0 + !0));
    console.log("([][[]] + []) = " + ([][[]] + []));
    console.log("(!0 + [].at)[10] = " + ((!0 + [].at)[10]));
    console.log("\"false\"[!0 + !0 + !0] = " + ("false"[!0 + !0 + !0]));

    // 解析构造函数名的部分
    const constructorStr = ([].at + [])[!0 + !0 + !0] + (!0 + [].at)[10] + ([][[]] + [])[1] + "false"[!0 + !0 + !0] + "tr" + ([][[]] + [])[0] + ([].at + [])[!0 + !0 + !0] + "t" + (!0 + [].at)[10] + "r";
    console.log("构造函数名: " + constructorStr);

    return Q[0];
  } catch (e) {
    console.error("解密Q[0]失败:", e);
    return "解密失败";
  }
}

// 执行解密并显示结果
const result = decryptQ();
console.log("\n最终结果: Q[0] = " + result);

// 尝试获取更多调试信息
console.log("\n其他辅助解密信息:");
console.log("[].at = " + [].at);
console.log("typeof [].at = " + typeof [].at);
console.log("Object.prototype.toString.call([].at) = " + Object.prototype.toString.call([].at));
